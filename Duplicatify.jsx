// Written by Knut Skaala / @superunrelated/*@@@BUILDINFO@@@ Duplicatify.jsx 0.0.0.1*//*// BEGIN__HARVEST_EXCEPTION_ZSTRING<javascriptresource>	<name>Duplicatify</name>  <category>banners</category>	<eventid>41daf3a0-5a96-11e4-8ed6-0800200c9a66</eventid></javascriptresource>// END__HARVEST_EXCEPTION_ZSTRING*/#target photoshopvar startDisplayDialogs = app.displayDialogs;main();app.displayDialogs = startDisplayDialogs;function main() {  app.bringToFront();  app.displayDialogs = DialogModes.NO;      var src = getCurrentDocument();  if (!src) {    return;  }  if (src.doc.resolution != 72){    alert("You have fucked up! \nThe resolution must be 72 dpi.");    return;  }  var result = showDialog();  if (!result) {    return;  }  var versions = parseVersions(result);  if (versions.length > 0){    for (var i = 0; i<versions.length; i++) {      duplicatify(versions[i], src)    }  }}function duplicatify(version, src) {  var name = version.width + "x" + version.height + src.name + src.extension;  var file = new File(src.doc.path + "/" + name);  if (file.exists){      alert('"' + name + '"' + " exists and will not be overwritten.");      return;  }  var options = new PhotoshopSaveOptions();  options.layers = true;  src.doc.saveAs(file, options, true, Extension.LOWERCASE);  var document = app.open(file);  app.activeDocument = document;  document.resizeCanvas(version.width, version.height, AnchorPosition.TOPLEFT);  document.save();  document.close();}function getCurrentDocument(){  var doc;  try {    doc = app.activeDocument;  } catch (e){    alert("You must have an open document.");    return false;  }    if (!doc.saved){    alert("You must save the active document before running this script.");    return false;  }    var data = parseDoc(doc);  if (!data){      alert("Documents must be named in the following format: 486x400_filename.psd");      return false;  }  return data;}function parseDoc(doc) {  var arr = doc.name.match(/(\d{2,4})x(\d{2,4})(.+?)(?=\.psd)(\.psd)/i);  if (!arr){      return false;  }  var result = {      width: arr[1],      height: arr[2],      name: arr[3],      extension: arr[4],      doc: doc  }  if (!result.width || !result.height || !result.name || !result.extension || result.extension !== ".psd"){      return false;  }  return result;}function parseVersions(str) {  var result = new Array();  var regexp = /(\d{2,4})x(\d{2,4})/g;  var arr;  while ((arr = regexp.exec(str)) !== null){    result.push({        width: parseInt(arr[1]),        height: parseInt(arr[2])    });  }      return result;}function idIsUnique(versions, id){  for (var i = 0; i<versions.length; i++) {    var o = versions[i];    if (o.id == id){        return false;     }  }  return true;}function showDialog() {  var dlgMain = new Window("dialog", "Duplicatify");    // match our dialog background color to the host application  var brush = dlgMain.graphics.newBrush (dlgMain.graphics.BrushType.THEME_COLOR, "appDialogBackground");  dlgMain.graphics.backgroundColor = brush;  dlgMain.graphics.disabledBackgroundColor = dlgMain.graphics.backgroundColor;  dlgMain.orientation = 'column';  dlgMain.alignChildren = 'left';    // help text  dlgMain.add("statictext", undefined, "Add formats to create. (fx: 300x250, 150x980, ...)");  // main  dlgMain.grpTop = dlgMain.add("group");  dlgMain.grpTop.orientation = 'row';  dlgMain.grpTop.alignChildren = 'top';  dlgMain.grpTop.alignment = 'fill';  // left group  dlgMain.grpTopLeft = dlgMain.grpTop.add("group");  dlgMain.grpTopLeft.orientation = 'column';  dlgMain.grpTopLeft.alignChildren = 'left';  dlgMain.grpTopLeft.alignment = 'fill';  // input text  dlgMain.etDestination = dlgMain.grpTopLeft.add("edittext", undefined, "", {multiline:true});  dlgMain.etDestination.preferredSize.width = 300;  dlgMain.etDestination.preferredSize.height = 300;  // right group  dlgMain.grpTopRight = dlgMain.grpTop.add("group");  dlgMain.grpTopRight.orientation = 'column';  dlgMain.grpTopRight.alignChildren = 'fill';    // Run button  dlgMain.btnRun = dlgMain.grpTopRight.add("button", undefined, "Run" );  dlgMain.btnRun.onClick = function() {    dlgMain.close(1);  }  // Cancel button  dlgMain.btnCancel = dlgMain.grpTopRight.add("button", undefined, "Cancel" );    dlgMain.btnCancel.onClick = function() {     dlgMain.close(0);  }  app.bringToFront();  dlgMain.center();    var result = dlgMain.show();  if (result == 1){     return dlgMain.etDestination.text;  } else {     return false;  }}